/*
 * generated by Xtext
 */
package org.eclipse.xtext.botlib.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class BotDuinoGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DomainModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.botlib.dsl.BotDuino.DomainModel");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsEntityParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//DomainModel:
		//	elements+=Entity*;
		@Override public ParserRule getRule() { return rule; }

		//elements+=Entity*
		public Assignment getElementsAssignment() { return cElementsAssignment; }

		//Entity
		public RuleCall getElementsEntityParserRuleCall_0() { return cElementsEntityParserRuleCall_0; }
	}

	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.botlib.dsl.BotDuino.Entity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRulesParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRegistersParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMethodsParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Entity:
		//	Type | Rules | Registers | Methods;
		@Override public ParserRule getRule() { return rule; }

		//Type | Rules | Registers | Methods
		public Alternatives getAlternatives() { return cAlternatives; }

		//Type
		public RuleCall getTypeParserRuleCall_0() { return cTypeParserRuleCall_0; }

		//Rules
		public RuleCall getRulesParserRuleCall_1() { return cRulesParserRuleCall_1; }

		//Registers
		public RuleCall getRegistersParserRuleCall_2() { return cRegistersParserRuleCall_2; }

		//Methods
		public RuleCall getMethodsParserRuleCall_3() { return cMethodsParserRuleCall_3; }
	}

	public class RegistersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.botlib.dsl.BotDuino.Registers");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVARKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValuesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValuesINTTerminalRuleCall_3_0 = (RuleCall)cValuesAssignment_3.eContents().get(0);
		
		//Registers:
		//	'VAR' name=ID '=' values+=INT*;
		@Override public ParserRule getRule() { return rule; }

		//'VAR' name=ID '=' values+=INT*
		public Group getGroup() { return cGroup; }

		//'VAR'
		public Keyword getVARKeyword_0() { return cVARKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//values+=INT*
		public Assignment getValuesAssignment_3() { return cValuesAssignment_3; }

		//INT
		public RuleCall getValuesINTTerminalRuleCall_3_0() { return cValuesINTTerminalRuleCall_3_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.botlib.dsl.BotDuino.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLEDParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cButtonParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMotorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSensorParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBlueToothParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cCTRLParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cServoParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Type:
		//	LED | Button | Motor | Sensor | BlueTooth | CTRL | Servo;
		@Override public ParserRule getRule() { return rule; }

		//LED | Button | Motor | Sensor | BlueTooth | CTRL | Servo
		public Alternatives getAlternatives() { return cAlternatives; }

		//LED
		public RuleCall getLEDParserRuleCall_0() { return cLEDParserRuleCall_0; }

		//Button
		public RuleCall getButtonParserRuleCall_1() { return cButtonParserRuleCall_1; }

		//Motor
		public RuleCall getMotorParserRuleCall_2() { return cMotorParserRuleCall_2; }

		//Sensor
		public RuleCall getSensorParserRuleCall_3() { return cSensorParserRuleCall_3; }

		//BlueTooth
		public RuleCall getBlueToothParserRuleCall_4() { return cBlueToothParserRuleCall_4; }

		//CTRL
		public RuleCall getCTRLParserRuleCall_5() { return cCTRLParserRuleCall_5; }

		//Servo
		public RuleCall getServoParserRuleCall_6() { return cServoParserRuleCall_6; }
	}

	public class RulesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.botlib.dsl.BotDuino.Rules");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSensorRuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cButtonRuleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCTRLRuleParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBTRuleParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Rules:
		//	SensorRule | ButtonRule | CTRLRule | BTRule;
		@Override public ParserRule getRule() { return rule; }

		//SensorRule | ButtonRule | CTRLRule | BTRule
		public Alternatives getAlternatives() { return cAlternatives; }

		//SensorRule
		public RuleCall getSensorRuleParserRuleCall_0() { return cSensorRuleParserRuleCall_0; }

		//ButtonRule
		public RuleCall getButtonRuleParserRuleCall_1() { return cButtonRuleParserRuleCall_1; }

		//CTRLRule
		public RuleCall getCTRLRuleParserRuleCall_2() { return cCTRLRuleParserRuleCall_2; }

		//BTRule
		public RuleCall getBTRuleParserRuleCall_3() { return cBTRuleParserRuleCall_3; }
	}

	public class BTRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.botlib.dsl.BotDuino.BTRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSuperTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSuperTypeBlueToothCrossReference_0_0 = (CrossReference)cSuperTypeAssignment_0.eContents().get(0);
		private final RuleCall cSuperTypeBlueToothIDTerminalRuleCall_0_0_1 = (RuleCall)cSuperTypeBlueToothCrossReference_0_0.eContents().get(1);
		private final Keyword cWhenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cThenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenPartAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenPartXBlockExpressionParserRuleCall_4_0 = (RuleCall)cThenPartAssignment_4.eContents().get(0);
		
		//BTRule:
		//	superType=[BlueTooth]
		//	'when' name=ID
		//	'then' thenPart=XBlockExpression;
		@Override public ParserRule getRule() { return rule; }

		//superType=[BlueTooth] 'when' name=ID 'then' thenPart=XBlockExpression
		public Group getGroup() { return cGroup; }

		//superType=[BlueTooth]
		public Assignment getSuperTypeAssignment_0() { return cSuperTypeAssignment_0; }

		//[BlueTooth]
		public CrossReference getSuperTypeBlueToothCrossReference_0_0() { return cSuperTypeBlueToothCrossReference_0_0; }

		//ID
		public RuleCall getSuperTypeBlueToothIDTerminalRuleCall_0_0_1() { return cSuperTypeBlueToothIDTerminalRuleCall_0_0_1; }

		//'when'
		public Keyword getWhenKeyword_1() { return cWhenKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//'then'
		public Keyword getThenKeyword_3() { return cThenKeyword_3; }

		//thenPart=XBlockExpression
		public Assignment getThenPartAssignment_4() { return cThenPartAssignment_4; }

		//XBlockExpression
		public RuleCall getThenPartXBlockExpressionParserRuleCall_4_0() { return cThenPartXBlockExpressionParserRuleCall_4_0; }
	}

	public class SensorRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.botlib.dsl.BotDuino.SensorRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSuperTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSuperTypeSensorCrossReference_0_0 = (CrossReference)cSuperTypeAssignment_0.eContents().get(0);
		private final RuleCall cSuperTypeSensorIDTerminalRuleCall_0_0_1 = (RuleCall)cSuperTypeSensorCrossReference_0_0.eContents().get(1);
		private final Keyword cWhenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cHIGHKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cLOWKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Keyword cThenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenPartAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenPartXBlockExpressionParserRuleCall_4_0 = (RuleCall)cThenPartAssignment_4.eContents().get(0);
		
		//SensorRule:
		//	superType=[Sensor]
		//	'when' ('HIGH' | 'LOW')
		//	'then' thenPart=XBlockExpression;
		@Override public ParserRule getRule() { return rule; }

		//superType=[Sensor] 'when' ('HIGH' | 'LOW') 'then' thenPart=XBlockExpression
		public Group getGroup() { return cGroup; }

		//superType=[Sensor]
		public Assignment getSuperTypeAssignment_0() { return cSuperTypeAssignment_0; }

		//[Sensor]
		public CrossReference getSuperTypeSensorCrossReference_0_0() { return cSuperTypeSensorCrossReference_0_0; }

		//ID
		public RuleCall getSuperTypeSensorIDTerminalRuleCall_0_0_1() { return cSuperTypeSensorIDTerminalRuleCall_0_0_1; }

		//'when'
		public Keyword getWhenKeyword_1() { return cWhenKeyword_1; }

		//('HIGH' | 'LOW')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//'HIGH'
		public Keyword getHIGHKeyword_2_0() { return cHIGHKeyword_2_0; }

		//'LOW'
		public Keyword getLOWKeyword_2_1() { return cLOWKeyword_2_1; }

		//'then'
		public Keyword getThenKeyword_3() { return cThenKeyword_3; }

		//thenPart=XBlockExpression
		public Assignment getThenPartAssignment_4() { return cThenPartAssignment_4; }

		//XBlockExpression
		public RuleCall getThenPartXBlockExpressionParserRuleCall_4_0() { return cThenPartXBlockExpressionParserRuleCall_4_0; }
	}

	public class CTRLRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.botlib.dsl.BotDuino.CTRLRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSuperTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSuperTypeCTRLCrossReference_0_0 = (CrossReference)cSuperTypeAssignment_0.eContents().get(0);
		private final RuleCall cSuperTypeCTRLIDTerminalRuleCall_0_0_1 = (RuleCall)cSuperTypeCTRLCrossReference_0_0.eContents().get(1);
		private final Keyword cWhenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cUPKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cDOWNKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Keyword cLEFTKeyword_2_2 = (Keyword)cAlternatives_2.eContents().get(2);
		private final Keyword cRIGHTKeyword_2_3 = (Keyword)cAlternatives_2.eContents().get(3);
		private final Keyword cThenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenPartAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenPartXBlockExpressionParserRuleCall_4_0 = (RuleCall)cThenPartAssignment_4.eContents().get(0);
		
		//CTRLRule:
		//	superType=[CTRL]
		//	'when' ('UP' | 'DOWN' | 'LEFT' | 'RIGHT')
		//	'then' thenPart=XBlockExpression;
		@Override public ParserRule getRule() { return rule; }

		//superType=[CTRL] 'when' ('UP' | 'DOWN' | 'LEFT' | 'RIGHT') 'then' thenPart=XBlockExpression
		public Group getGroup() { return cGroup; }

		//superType=[CTRL]
		public Assignment getSuperTypeAssignment_0() { return cSuperTypeAssignment_0; }

		//[CTRL]
		public CrossReference getSuperTypeCTRLCrossReference_0_0() { return cSuperTypeCTRLCrossReference_0_0; }

		//ID
		public RuleCall getSuperTypeCTRLIDTerminalRuleCall_0_0_1() { return cSuperTypeCTRLIDTerminalRuleCall_0_0_1; }

		//'when'
		public Keyword getWhenKeyword_1() { return cWhenKeyword_1; }

		//('UP' | 'DOWN' | 'LEFT' | 'RIGHT')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//'UP'
		public Keyword getUPKeyword_2_0() { return cUPKeyword_2_0; }

		//'DOWN'
		public Keyword getDOWNKeyword_2_1() { return cDOWNKeyword_2_1; }

		//'LEFT'
		public Keyword getLEFTKeyword_2_2() { return cLEFTKeyword_2_2; }

		//'RIGHT'
		public Keyword getRIGHTKeyword_2_3() { return cRIGHTKeyword_2_3; }

		//'then'
		public Keyword getThenKeyword_3() { return cThenKeyword_3; }

		//thenPart=XBlockExpression
		public Assignment getThenPartAssignment_4() { return cThenPartAssignment_4; }

		//XBlockExpression
		public RuleCall getThenPartXBlockExpressionParserRuleCall_4_0() { return cThenPartXBlockExpressionParserRuleCall_4_0; }
	}

	public class ButtonRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.botlib.dsl.BotDuino.ButtonRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSuperTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSuperTypeButtonCrossReference_0_0 = (CrossReference)cSuperTypeAssignment_0.eContents().get(0);
		private final RuleCall cSuperTypeButtonIDTerminalRuleCall_0_0_1 = (RuleCall)cSuperTypeButtonCrossReference_0_0.eContents().get(1);
		private final Keyword cWhenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cPUSHKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cThenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenPartAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenPartXBlockExpressionParserRuleCall_4_0 = (RuleCall)cThenPartAssignment_4.eContents().get(0);
		
		//ButtonRule:
		//	superType=[Button]
		//	'when' 'PUSH' 'then' thenPart=XBlockExpression;
		@Override public ParserRule getRule() { return rule; }

		//superType=[Button] 'when' 'PUSH' 'then' thenPart=XBlockExpression
		public Group getGroup() { return cGroup; }

		//superType=[Button]
		public Assignment getSuperTypeAssignment_0() { return cSuperTypeAssignment_0; }

		//[Button]
		public CrossReference getSuperTypeButtonCrossReference_0_0() { return cSuperTypeButtonCrossReference_0_0; }

		//ID
		public RuleCall getSuperTypeButtonIDTerminalRuleCall_0_0_1() { return cSuperTypeButtonIDTerminalRuleCall_0_0_1; }

		//'when'
		public Keyword getWhenKeyword_1() { return cWhenKeyword_1; }

		//'PUSH'
		public Keyword getPUSHKeyword_2() { return cPUSHKeyword_2; }

		//'then'
		public Keyword getThenKeyword_3() { return cThenKeyword_3; }

		//thenPart=XBlockExpression
		public Assignment getThenPartAssignment_4() { return cThenPartAssignment_4; }

		//XBlockExpression
		public RuleCall getThenPartXBlockExpressionParserRuleCall_4_0() { return cThenPartXBlockExpressionParserRuleCall_4_0; }
	}

	public class MethodsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.botlib.dsl.BotDuino.Methods");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSuperTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSuperTypeTypeCrossReference_0_0 = (CrossReference)cSuperTypeAssignment_0.eContents().get(0);
		private final RuleCall cSuperTypeTypeIDTerminalRuleCall_0_0_1 = (RuleCall)cSuperTypeTypeCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Methods:
		//	superType=[Type] '.' name=ID;
		@Override public ParserRule getRule() { return rule; }

		//superType=[Type] '.' name=ID
		public Group getGroup() { return cGroup; }

		//superType=[Type]
		public Assignment getSuperTypeAssignment_0() { return cSuperTypeAssignment_0; }

		//[Type]
		public CrossReference getSuperTypeTypeCrossReference_0_0() { return cSuperTypeTypeCrossReference_0_0; }

		//ID
		public RuleCall getSuperTypeTypeIDTerminalRuleCall_0_0_1() { return cSuperTypeTypeIDTerminalRuleCall_0_0_1; }

		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class LEDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.botlib.dsl.BotDuino.LED");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLEDKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperTypeLEDCrossReference_2_1_0 = (CrossReference)cSuperTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperTypeLEDIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSuperTypeLEDCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValuesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValuesINTTerminalRuleCall_4_0 = (RuleCall)cValuesAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//LED:
		//	'LED' name=ID ('extends' superType=[LED])? '('
		//	values+=INT*
		//	')';
		@Override public ParserRule getRule() { return rule; }

		//'LED' name=ID ('extends' superType=[LED])? '(' values+=INT* ')'
		public Group getGroup() { return cGroup; }

		//'LED'
		public Keyword getLEDKeyword_0() { return cLEDKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//('extends' superType=[LED])?
		public Group getGroup_2() { return cGroup_2; }

		//'extends'
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//superType=[LED]
		public Assignment getSuperTypeAssignment_2_1() { return cSuperTypeAssignment_2_1; }

		//[LED]
		public CrossReference getSuperTypeLEDCrossReference_2_1_0() { return cSuperTypeLEDCrossReference_2_1_0; }

		//ID
		public RuleCall getSuperTypeLEDIDTerminalRuleCall_2_1_0_1() { return cSuperTypeLEDIDTerminalRuleCall_2_1_0_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//values+=INT*
		public Assignment getValuesAssignment_4() { return cValuesAssignment_4; }

		//INT
		public RuleCall getValuesINTTerminalRuleCall_4_0() { return cValuesINTTerminalRuleCall_4_0; }

		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class ButtonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.botlib.dsl.BotDuino.Button");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cButtonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperTypeButtonCrossReference_2_1_0 = (CrossReference)cSuperTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperTypeButtonIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSuperTypeButtonCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValuesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValuesINTTerminalRuleCall_4_0 = (RuleCall)cValuesAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Button:
		//	'Button' name=ID ('extends' superType=[Button])? '('
		//	values+=INT*
		//	')';
		@Override public ParserRule getRule() { return rule; }

		//'Button' name=ID ('extends' superType=[Button])? '(' values+=INT* ')'
		public Group getGroup() { return cGroup; }

		//'Button'
		public Keyword getButtonKeyword_0() { return cButtonKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//('extends' superType=[Button])?
		public Group getGroup_2() { return cGroup_2; }

		//'extends'
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//superType=[Button]
		public Assignment getSuperTypeAssignment_2_1() { return cSuperTypeAssignment_2_1; }

		//[Button]
		public CrossReference getSuperTypeButtonCrossReference_2_1_0() { return cSuperTypeButtonCrossReference_2_1_0; }

		//ID
		public RuleCall getSuperTypeButtonIDTerminalRuleCall_2_1_0_1() { return cSuperTypeButtonIDTerminalRuleCall_2_1_0_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//values+=INT*
		public Assignment getValuesAssignment_4() { return cValuesAssignment_4; }

		//INT
		public RuleCall getValuesINTTerminalRuleCall_4_0() { return cValuesINTTerminalRuleCall_4_0; }

		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class MotorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.botlib.dsl.BotDuino.Motor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMotorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperTypeMotorCrossReference_2_1_0 = (CrossReference)cSuperTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperTypeMotorIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSuperTypeMotorCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValuesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValuesINTTerminalRuleCall_4_0 = (RuleCall)cValuesAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cValuesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cValuesINTTerminalRuleCall_6_0 = (RuleCall)cValuesAssignment_6.eContents().get(0);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cValuesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cValuesINTTerminalRuleCall_8_0 = (RuleCall)cValuesAssignment_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Motor:
		//	'Motor' name=ID ('extends' superType=[Motor])? '('
		//	values+=INT* ',' values+=INT* ',' values+=INT*
		//	')';
		@Override public ParserRule getRule() { return rule; }

		//'Motor' name=ID ('extends' superType=[Motor])? '(' values+=INT* ',' values+=INT* ',' values+=INT* ')'
		public Group getGroup() { return cGroup; }

		//'Motor'
		public Keyword getMotorKeyword_0() { return cMotorKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//('extends' superType=[Motor])?
		public Group getGroup_2() { return cGroup_2; }

		//'extends'
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//superType=[Motor]
		public Assignment getSuperTypeAssignment_2_1() { return cSuperTypeAssignment_2_1; }

		//[Motor]
		public CrossReference getSuperTypeMotorCrossReference_2_1_0() { return cSuperTypeMotorCrossReference_2_1_0; }

		//ID
		public RuleCall getSuperTypeMotorIDTerminalRuleCall_2_1_0_1() { return cSuperTypeMotorIDTerminalRuleCall_2_1_0_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//values+=INT*
		public Assignment getValuesAssignment_4() { return cValuesAssignment_4; }

		//INT
		public RuleCall getValuesINTTerminalRuleCall_4_0() { return cValuesINTTerminalRuleCall_4_0; }

		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//values+=INT*
		public Assignment getValuesAssignment_6() { return cValuesAssignment_6; }

		//INT
		public RuleCall getValuesINTTerminalRuleCall_6_0() { return cValuesINTTerminalRuleCall_6_0; }

		//','
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }

		//values+=INT*
		public Assignment getValuesAssignment_8() { return cValuesAssignment_8; }

		//INT
		public RuleCall getValuesINTTerminalRuleCall_8_0() { return cValuesINTTerminalRuleCall_8_0; }

		//')'
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
	}

	public class SensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.botlib.dsl.BotDuino.Sensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSensorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperTypeSensorCrossReference_2_1_0 = (CrossReference)cSuperTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperTypeSensorIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSuperTypeSensorCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValuesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValuesINTTerminalRuleCall_4_0 = (RuleCall)cValuesAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cValuesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cValuesINTTerminalRuleCall_6_0 = (RuleCall)cValuesAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Sensor:
		//	'Sensor' name=ID ('extends' superType=[Sensor])? '('
		//	values+=INT* ',' values+=INT*
		//	')';
		@Override public ParserRule getRule() { return rule; }

		//'Sensor' name=ID ('extends' superType=[Sensor])? '(' values+=INT* ',' values+=INT* ')'
		public Group getGroup() { return cGroup; }

		//'Sensor'
		public Keyword getSensorKeyword_0() { return cSensorKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//('extends' superType=[Sensor])?
		public Group getGroup_2() { return cGroup_2; }

		//'extends'
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//superType=[Sensor]
		public Assignment getSuperTypeAssignment_2_1() { return cSuperTypeAssignment_2_1; }

		//[Sensor]
		public CrossReference getSuperTypeSensorCrossReference_2_1_0() { return cSuperTypeSensorCrossReference_2_1_0; }

		//ID
		public RuleCall getSuperTypeSensorIDTerminalRuleCall_2_1_0_1() { return cSuperTypeSensorIDTerminalRuleCall_2_1_0_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//values+=INT*
		public Assignment getValuesAssignment_4() { return cValuesAssignment_4; }

		//INT
		public RuleCall getValuesINTTerminalRuleCall_4_0() { return cValuesINTTerminalRuleCall_4_0; }

		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//values+=INT*
		public Assignment getValuesAssignment_6() { return cValuesAssignment_6; }

		//INT
		public RuleCall getValuesINTTerminalRuleCall_6_0() { return cValuesINTTerminalRuleCall_6_0; }

		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}

	public class BlueToothElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.botlib.dsl.BotDuino.BlueTooth");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBlueToothKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperTypeBlueToothCrossReference_2_1_0 = (CrossReference)cSuperTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperTypeBlueToothIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSuperTypeBlueToothCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValuesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValuesINTTerminalRuleCall_4_0 = (RuleCall)cValuesAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cValuesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cValuesINTTerminalRuleCall_6_0 = (RuleCall)cValuesAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//BlueTooth:
		//	'BlueTooth' name=ID ('extends' superType=[BlueTooth])? '('
		//	values+=INT* ',' values+=INT*
		//	')';
		@Override public ParserRule getRule() { return rule; }

		//'BlueTooth' name=ID ('extends' superType=[BlueTooth])? '(' values+=INT* ',' values+=INT* ')'
		public Group getGroup() { return cGroup; }

		//'BlueTooth'
		public Keyword getBlueToothKeyword_0() { return cBlueToothKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//('extends' superType=[BlueTooth])?
		public Group getGroup_2() { return cGroup_2; }

		//'extends'
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//superType=[BlueTooth]
		public Assignment getSuperTypeAssignment_2_1() { return cSuperTypeAssignment_2_1; }

		//[BlueTooth]
		public CrossReference getSuperTypeBlueToothCrossReference_2_1_0() { return cSuperTypeBlueToothCrossReference_2_1_0; }

		//ID
		public RuleCall getSuperTypeBlueToothIDTerminalRuleCall_2_1_0_1() { return cSuperTypeBlueToothIDTerminalRuleCall_2_1_0_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//values+=INT*
		public Assignment getValuesAssignment_4() { return cValuesAssignment_4; }

		//INT
		public RuleCall getValuesINTTerminalRuleCall_4_0() { return cValuesINTTerminalRuleCall_4_0; }

		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//values+=INT*
		public Assignment getValuesAssignment_6() { return cValuesAssignment_6; }

		//INT
		public RuleCall getValuesINTTerminalRuleCall_6_0() { return cValuesINTTerminalRuleCall_6_0; }

		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}

	public class CTRLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.botlib.dsl.BotDuino.CTRL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCTRLKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperTypeCTRLCrossReference_2_1_0 = (CrossReference)cSuperTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperTypeCTRLIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSuperTypeCTRLCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValuesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValuesINTTerminalRuleCall_4_0 = (RuleCall)cValuesAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cValuesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cValuesINTTerminalRuleCall_6_0 = (RuleCall)cValuesAssignment_6.eContents().get(0);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cValuesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cValuesINTTerminalRuleCall_8_0 = (RuleCall)cValuesAssignment_8.eContents().get(0);
		private final Keyword cCommaKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cValuesAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cValuesINTTerminalRuleCall_10_0 = (RuleCall)cValuesAssignment_10.eContents().get(0);
		private final Keyword cCommaKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cValuesAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cValuesINTTerminalRuleCall_12_0 = (RuleCall)cValuesAssignment_12.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//CTRL:
		//	'CTRL' name=ID ('extends' superType=[CTRL])? '('
		//	values+=INT* ',' values+=INT* ',' values+=INT* ',' values+=INT* ',' values+=INT*
		//	')';
		@Override public ParserRule getRule() { return rule; }

		//'CTRL' name=ID ('extends' superType=[CTRL])? '(' values+=INT* ',' values+=INT* ',' values+=INT* ',' values+=INT* ','
		//values+=INT* ')'
		public Group getGroup() { return cGroup; }

		//'CTRL'
		public Keyword getCTRLKeyword_0() { return cCTRLKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//('extends' superType=[CTRL])?
		public Group getGroup_2() { return cGroup_2; }

		//'extends'
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//superType=[CTRL]
		public Assignment getSuperTypeAssignment_2_1() { return cSuperTypeAssignment_2_1; }

		//[CTRL]
		public CrossReference getSuperTypeCTRLCrossReference_2_1_0() { return cSuperTypeCTRLCrossReference_2_1_0; }

		//ID
		public RuleCall getSuperTypeCTRLIDTerminalRuleCall_2_1_0_1() { return cSuperTypeCTRLIDTerminalRuleCall_2_1_0_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//values+=INT*
		public Assignment getValuesAssignment_4() { return cValuesAssignment_4; }

		//INT
		public RuleCall getValuesINTTerminalRuleCall_4_0() { return cValuesINTTerminalRuleCall_4_0; }

		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//values+=INT*
		public Assignment getValuesAssignment_6() { return cValuesAssignment_6; }

		//INT
		public RuleCall getValuesINTTerminalRuleCall_6_0() { return cValuesINTTerminalRuleCall_6_0; }

		//','
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }

		//values+=INT*
		public Assignment getValuesAssignment_8() { return cValuesAssignment_8; }

		//INT
		public RuleCall getValuesINTTerminalRuleCall_8_0() { return cValuesINTTerminalRuleCall_8_0; }

		//','
		public Keyword getCommaKeyword_9() { return cCommaKeyword_9; }

		//values+=INT*
		public Assignment getValuesAssignment_10() { return cValuesAssignment_10; }

		//INT
		public RuleCall getValuesINTTerminalRuleCall_10_0() { return cValuesINTTerminalRuleCall_10_0; }

		//','
		public Keyword getCommaKeyword_11() { return cCommaKeyword_11; }

		//values+=INT*
		public Assignment getValuesAssignment_12() { return cValuesAssignment_12; }

		//INT
		public RuleCall getValuesINTTerminalRuleCall_12_0() { return cValuesINTTerminalRuleCall_12_0; }

		//')'
		public Keyword getRightParenthesisKeyword_13() { return cRightParenthesisKeyword_13; }
	}

	public class ServoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.botlib.dsl.BotDuino.Servo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cServoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperTypeServoCrossReference_2_1_0 = (CrossReference)cSuperTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperTypeServoIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSuperTypeServoCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValuesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValuesINTTerminalRuleCall_4_0 = (RuleCall)cValuesAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cValuesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cValuesINTTerminalRuleCall_6_0 = (RuleCall)cValuesAssignment_6.eContents().get(0);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cValuesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cValuesINTTerminalRuleCall_8_0 = (RuleCall)cValuesAssignment_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Servo:
		//	'Servo' name=ID ('extends' superType=[Servo])? '('
		//	values+=INT* ',' values+=INT* ',' values+=INT*
		//	')';
		@Override public ParserRule getRule() { return rule; }

		//'Servo' name=ID ('extends' superType=[Servo])? '(' values+=INT* ',' values+=INT* ',' values+=INT* ')'
		public Group getGroup() { return cGroup; }

		//'Servo'
		public Keyword getServoKeyword_0() { return cServoKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//('extends' superType=[Servo])?
		public Group getGroup_2() { return cGroup_2; }

		//'extends'
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//superType=[Servo]
		public Assignment getSuperTypeAssignment_2_1() { return cSuperTypeAssignment_2_1; }

		//[Servo]
		public CrossReference getSuperTypeServoCrossReference_2_1_0() { return cSuperTypeServoCrossReference_2_1_0; }

		//ID
		public RuleCall getSuperTypeServoIDTerminalRuleCall_2_1_0_1() { return cSuperTypeServoIDTerminalRuleCall_2_1_0_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//values+=INT*
		public Assignment getValuesAssignment_4() { return cValuesAssignment_4; }

		//INT
		public RuleCall getValuesINTTerminalRuleCall_4_0() { return cValuesINTTerminalRuleCall_4_0; }

		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//values+=INT*
		public Assignment getValuesAssignment_6() { return cValuesAssignment_6; }

		//INT
		public RuleCall getValuesINTTerminalRuleCall_6_0() { return cValuesINTTerminalRuleCall_6_0; }

		//','
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }

		//values+=INT*
		public Assignment getValuesAssignment_8() { return cValuesAssignment_8; }

		//INT
		public RuleCall getValuesINTTerminalRuleCall_8_0() { return cValuesINTTerminalRuleCall_8_0; }

		//')'
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
	}

	public class XBlockExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.botlib.dsl.BotDuino.XBlockExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXBlockExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionsXExpressionOrVarDeclarationParserRuleCall_2_0 = (RuleCall)cExpressionsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//XBlockExpression xbase::XExpression:
		//	{xbase::XBlockExpression}
		//	'{'
		//	expressions+=XExpressionOrVarDeclaration*
		//	'}'
		@Override public ParserRule getRule() { return rule; }

		//{xbase::XBlockExpression} '{' expressions+=XExpressionOrVarDeclaration* '}'
		public Group getGroup() { return cGroup; }

		//{xbase::XBlockExpression}
		public Action getXBlockExpressionAction_0() { return cXBlockExpressionAction_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//expressions+=XExpressionOrVarDeclaration*
		public Assignment getExpressionsAssignment_2() { return cExpressionsAssignment_2; }

		//XExpressionOrVarDeclaration
		public RuleCall getExpressionsXExpressionOrVarDeclarationParserRuleCall_2_0() { return cExpressionsXExpressionOrVarDeclarationParserRuleCall_2_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	
	
	private final DomainModelElements pDomainModel;
	private final EntityElements pEntity;
	private final RegistersElements pRegisters;
	private final TypeElements pType;
	private final RulesElements pRules;
	private final BTRuleElements pBTRule;
	private final SensorRuleElements pSensorRule;
	private final CTRLRuleElements pCTRLRule;
	private final ButtonRuleElements pButtonRule;
	private final MethodsElements pMethods;
	private final LEDElements pLED;
	private final ButtonElements pButton;
	private final MotorElements pMotor;
	private final SensorElements pSensor;
	private final BlueToothElements pBlueTooth;
	private final CTRLElements pCTRL;
	private final ServoElements pServo;
	private final TerminalRule tINT;
	private final TerminalRule tML_COMMENT;
	private final XBlockExpressionElements pXBlockExpression;
	
	private final Grammar grammar;

	private final XbaseGrammarAccess gaXbase;

	private final XtypeGrammarAccess gaXtype;

	@Inject
	public BotDuinoGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase,
		XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.gaXtype = gaXtype;
		this.pDomainModel = new DomainModelElements();
		this.pEntity = new EntityElements();
		this.pRegisters = new RegistersElements();
		this.pType = new TypeElements();
		this.pRules = new RulesElements();
		this.pBTRule = new BTRuleElements();
		this.pSensorRule = new SensorRuleElements();
		this.pCTRLRule = new CTRLRuleElements();
		this.pButtonRule = new ButtonRuleElements();
		this.pMethods = new MethodsElements();
		this.pLED = new LEDElements();
		this.pButton = new ButtonElements();
		this.pMotor = new MotorElements();
		this.pSensor = new SensorElements();
		this.pBlueTooth = new BlueToothElements();
		this.pCTRL = new CTRLElements();
		this.pServo = new ServoElements();
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.botlib.dsl.BotDuino.INT");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.botlib.dsl.BotDuino.ML_COMMENT");
		this.pXBlockExpression = new XBlockExpressionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.xtext.botlib.dsl.BotDuino".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	//DomainModel:
	//	elements+=Entity*;
	public DomainModelElements getDomainModelAccess() {
		return pDomainModel;
	}
	
	public ParserRule getDomainModelRule() {
		return getDomainModelAccess().getRule();
	}

	//Entity:
	//	Type | Rules | Registers | Methods;
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}

	//Registers:
	//	'VAR' name=ID '=' values+=INT*;
	public RegistersElements getRegistersAccess() {
		return pRegisters;
	}
	
	public ParserRule getRegistersRule() {
		return getRegistersAccess().getRule();
	}

	//Type:
	//	LED | Button | Motor | Sensor | BlueTooth | CTRL | Servo;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//Rules:
	//	SensorRule | ButtonRule | CTRLRule | BTRule;
	public RulesElements getRulesAccess() {
		return pRules;
	}
	
	public ParserRule getRulesRule() {
		return getRulesAccess().getRule();
	}

	//BTRule:
	//	superType=[BlueTooth]
	//	'when' name=ID
	//	'then' thenPart=XBlockExpression;
	public BTRuleElements getBTRuleAccess() {
		return pBTRule;
	}
	
	public ParserRule getBTRuleRule() {
		return getBTRuleAccess().getRule();
	}

	//SensorRule:
	//	superType=[Sensor]
	//	'when' ('HIGH' | 'LOW')
	//	'then' thenPart=XBlockExpression;
	public SensorRuleElements getSensorRuleAccess() {
		return pSensorRule;
	}
	
	public ParserRule getSensorRuleRule() {
		return getSensorRuleAccess().getRule();
	}

	//CTRLRule:
	//	superType=[CTRL]
	//	'when' ('UP' | 'DOWN' | 'LEFT' | 'RIGHT')
	//	'then' thenPart=XBlockExpression;
	public CTRLRuleElements getCTRLRuleAccess() {
		return pCTRLRule;
	}
	
	public ParserRule getCTRLRuleRule() {
		return getCTRLRuleAccess().getRule();
	}

	//ButtonRule:
	//	superType=[Button]
	//	'when' 'PUSH' 'then' thenPart=XBlockExpression;
	public ButtonRuleElements getButtonRuleAccess() {
		return pButtonRule;
	}
	
	public ParserRule getButtonRuleRule() {
		return getButtonRuleAccess().getRule();
	}

	//Methods:
	//	superType=[Type] '.' name=ID;
	public MethodsElements getMethodsAccess() {
		return pMethods;
	}
	
	public ParserRule getMethodsRule() {
		return getMethodsAccess().getRule();
	}

	//LED:
	//	'LED' name=ID ('extends' superType=[LED])? '('
	//	values+=INT*
	//	')';
	public LEDElements getLEDAccess() {
		return pLED;
	}
	
	public ParserRule getLEDRule() {
		return getLEDAccess().getRule();
	}

	//Button:
	//	'Button' name=ID ('extends' superType=[Button])? '('
	//	values+=INT*
	//	')';
	public ButtonElements getButtonAccess() {
		return pButton;
	}
	
	public ParserRule getButtonRule() {
		return getButtonAccess().getRule();
	}

	//Motor:
	//	'Motor' name=ID ('extends' superType=[Motor])? '('
	//	values+=INT* ',' values+=INT* ',' values+=INT*
	//	')';
	public MotorElements getMotorAccess() {
		return pMotor;
	}
	
	public ParserRule getMotorRule() {
		return getMotorAccess().getRule();
	}

	//Sensor:
	//	'Sensor' name=ID ('extends' superType=[Sensor])? '('
	//	values+=INT* ',' values+=INT*
	//	')';
	public SensorElements getSensorAccess() {
		return pSensor;
	}
	
	public ParserRule getSensorRule() {
		return getSensorAccess().getRule();
	}

	//BlueTooth:
	//	'BlueTooth' name=ID ('extends' superType=[BlueTooth])? '('
	//	values+=INT* ',' values+=INT*
	//	')';
	public BlueToothElements getBlueToothAccess() {
		return pBlueTooth;
	}
	
	public ParserRule getBlueToothRule() {
		return getBlueToothAccess().getRule();
	}

	//CTRL:
	//	'CTRL' name=ID ('extends' superType=[CTRL])? '('
	//	values+=INT* ',' values+=INT* ',' values+=INT* ',' values+=INT* ',' values+=INT*
	//	')';
	public CTRLElements getCTRLAccess() {
		return pCTRL;
	}
	
	public ParserRule getCTRLRule() {
		return getCTRLAccess().getRule();
	}

	//Servo:
	//	'Servo' name=ID ('extends' superType=[Servo])? '('
	//	values+=INT* ',' values+=INT* ',' values+=INT*
	//	')';
	public ServoElements getServoAccess() {
		return pServo;
	}
	
	public ParserRule getServoRule() {
		return getServoAccess().getRule();
	}

	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return tINT;
	} 

	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	} 

	//XBlockExpression xbase::XExpression:
	//	{xbase::XBlockExpression}
	//	'{'
	//	expressions+=XExpressionOrVarDeclaration*
	//	'}'
	public XBlockExpressionElements getXBlockExpressionAccess() {
		return pXBlockExpression;
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	'=';
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	'+=' | '-=' | '*=' | '/=' | '%=' |
	//	'<' '<' '=' |
	//	'>' '>'? '>=';
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	'||';
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	'&&';
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	'==' | '!=' | '===' | '!==';
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference |
	//	=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	'>=' | '<' '=' | '>' | '<';
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	'->'
	//	| '..<'
	//	| '>' '..'
	//	| '..'
	//	| '=>'
	//	| '>' (=> ('>' '>') | '>') | '<' (=> ('<' '<') | '<' | '=>') | '<>'
	//	| '?:';
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	'+' | '-';
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	'*' | '**' | '/' | '%';
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation
	//	| XCastedExpression
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} 'as') type=JvmTypeReference)*
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XPostfixOperation XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}

	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}

	//XMemberFeatureCall XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ('.' | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
	//	| => ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ('<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (memberCallArguments+=XShortClosure
	//	| memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)?
	//	')')?
	//	memberCallArguments+=XClosure?)*
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression XExpression:
	//	XConstructorCall | super::XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} '#' '{' (elements+=XExpression (',' elements+=XExpression)*)? '}';
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} '#' '[' (elements+=XExpression (',' elements+=XExpression)*)? ']';
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure XExpression:
	//	=> ({XClosure}
	//	'[')
	//	=> ((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|')?
	//	expression=XExpressionInClosure
	//	']'
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ';'?)*
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|') expression=XExpression
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression XExpression:
	//	'(' XExpression ')'
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression XExpression:
	//	{XIfExpression}
	//	'if' '(' if=XExpression ')'
	//	then=XExpression (=> 'else' else=XExpression)?
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression XExpression:
	//	{XSwitchExpression}
	//	'switch' (=> ('(' declaredParam=JvmFormalParameter ':') switch=XExpression ')'
	//	| => (declaredParam=JvmFormalParameter ':')? switch=XExpression) '{'
	//	cases+=XCasePart* ('default' ':' default=XExpression)?
	//	'}'
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ('case' case=XExpression)? (':' then=XExpression | fallThrough?=',');
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression XExpression:
	//	=> ({XForLoopExpression}
	//	'for' '(' declaredParam=JvmFormalParameter ':') forExpression=XExpression ')'
	//	eachExpression=XExpression
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XBasicForLoopExpression XExpression:
	//	{XBasicForLoopExpression}
	//	'for' '(' (initExpressions+=XExpressionOrVarDeclaration (',' initExpressions+=XExpressionOrVarDeclaration)*)? ';'
	//	expression=XExpression? ';' (updateExpressions+=XExpression (',' updateExpressions+=XExpression)*)? ')'
	//	eachExpression=XExpression
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}

	//XWhileExpression XExpression:
	//	{XWhileExpression}
	//	'while' '(' predicate=XExpression ')'
	//	body=XExpression
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression XExpression:
	//	{XDoWhileExpression}
	//	'do'
	//	body=XExpression
	//	'while' '(' predicate=XExpression ')'
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XExpressionOrVarDeclaration XExpression:
	//	XVariableDeclaration | XExpression
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}

	//XVariableDeclaration XExpression:
	//	{XVariableDeclaration} (writeable?='var' | 'val') (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ('='
	//	right=XExpression)?
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall XExpression:
	//	{XFeatureCall} ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*)?
	//	')')?
	//	featureCallArguments+=XClosure?
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | 'extends' | 'static' | 'import' | 'extension';
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | 'super';
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall XExpression:
	//	{XConstructorCall}
	//	'new' constructor=[types::JvmConstructor|QualifiedName] (=> '<' typeArguments+=JvmArgumentTypeReference (','
	//	typeArguments+=JvmArgumentTypeReference)* '>')? (=> explicitConstructorCall?='(' (arguments+=XShortClosure
	//	| arguments+=XExpression (',' arguments+=XExpression)*)?
	//	')')?
	//	arguments+=XClosure?
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral XExpression:
	//	{XBooleanLiteral} ('false' | isTrue?='true')
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral XExpression:
	//	{XNullLiteral} 'null'
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral XExpression:
	//	{XNumberLiteral} value=Number
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral XExpression:
	//	{XStringLiteral} value=STRING
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral XExpression:
	//	{XTypeLiteral} 'typeof' '(' type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ')'
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression XExpression:
	//	{XThrowExpression} 'throw' expression=XExpression
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression XExpression:
	//	{XReturnExpression} 'return' -> expression=XExpression?
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression XExpression:
	//	{XTryCatchFinallyExpression}
	//	'try'
	//	expression=XExpression (catchClauses+=XCatchClause+ (=> 'finally' finallyExpression=XExpression)?
	//	| 'finally' finallyExpression=XExpression)
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XSynchronizedExpression XExpression:
	//	=> ({XSynchronizedExpression}
	//	'synchronized' '(') param=XExpression ')' expression=XExpression
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}

	//XCatchClause:
	//	=> 'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID (=> '.' ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (super::INT | DECIMAL) ('.' (super::INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * / StaticQualifier:
	//	(ValidID '::')+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	('0x' | '0X') ('0'..'9' | 'a'..'f' | 'A'..'F' | '_')+ ('#' (('b' | 'B') ('i' | 'I') | ('l' | 'L')))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal DECIMAL:
	//	super::INT (('e' | 'E') ('+' | '-')? super::INT)? (('b' | 'B') ('i' | 'I' | 'd' | 'D') | ('l' | 'L' | 'd' | 'D' | 'f'
	//	| 'F'))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)*
	//	| XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtype.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	'[' ']';
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|super::QualifiedName] (=> '<' arguments+=JvmArgumentTypeReference (','
	//	arguments+=JvmArgumentTypeReference)* '>' (=> ({JvmInnerTypeReference.outer=current} '.') type=[JvmType|ValidID] (=>
	//	'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} '?' (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*
	//	| constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	'extends' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded JvmUpperBound:
	//	'&' typeReference=JvmTypeReference
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	'super' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmLowerBoundAnded JvmLowerBound:
	//	'&' typeReference=JvmTypeReference
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtype.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	super::QualifiedName '.' '*';
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtype.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtype.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	'import' (static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?='*' | memberName=ValidID) | importedType=[JvmDeclaredType|super::QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ';'?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXtype.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//QualifiedNameInStaticImport:
	//	(ValidID '.')+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtype.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '$' | '_') ('a'..'z' | 'A'..'Z' | '$' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	} 

	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"'? |
	//	"'" ('\\' . | !('\\' | "'"))* "'"?;
	public TerminalRule getSTRINGRule() {
		return gaXtype.getSTRINGRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	} 
}
