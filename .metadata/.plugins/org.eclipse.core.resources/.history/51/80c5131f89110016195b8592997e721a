package org.eclipse.xtext.botlib.dsl.generator

import javax.inject.Inject
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.botlib.dsl.botDuino.BTRule
import org.eclipse.xtext.botlib.dsl.botDuino.ButtonRule
import org.eclipse.xtext.botlib.dsl.botDuino.LEDMethods
import org.eclipse.xtext.botlib.dsl.botDuino.MotorMethods
import org.eclipse.xtext.botlib.dsl.botDuino.Rules
import org.eclipse.xtext.botlib.dsl.botDuino.Type
import org.eclipse.xtext.botlib.dsl.botDuino.impl.BTRuleImpl
import org.eclipse.xtext.botlib.dsl.botDuino.impl.BlueToothImpl
import org.eclipse.xtext.botlib.dsl.botDuino.impl.ButtonRuleImpl
import org.eclipse.xtext.botlib.dsl.botDuino.impl.LEDMethodsImpl
import org.eclipse.xtext.botlib.dsl.botDuino.impl.MotorMethodsImpl
import org.eclipse.xtext.botlib.dsl.botDuino.impl.ObjectLiteralImpl
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.naming.IQualifiedNameProvider
import org.eclipse.xtext.botlib.dsl.botDuino.Variables

class BotDuinoGenerator implements IGenerator {
	
	  @Inject extension IQualifiedNameProvider
	  
	  var String ql = System.getProperty("line.separator")
	  var String ind1 = "	"
	  var String ind2 = "		"
	  var String ind3 = "			"
	  var String c_includes = "#include <BOTLib.h>" + ql
	  var String c_vars = ""
	  var String c_setup = "void setup() {" + ql
	  var String c_loop = "void loop() {" + ql
	  var String bt_block = ""
	  var String context = ""
	  var boolean bt_test = false
	  	  
	  override void doGenerate(Resource resource, IFileSystemAccess fsa) {

	    for(e: resource.allContents.toIterable.filterNull) {
			e.process
	    }
	    //
//	    if(bt_test){
//	    	c_loop += bt_block + ind1 + "}" + ql
//	    }
     	c_loop += bt_block + ql
		context = c_includes + ql + c_vars + ql + c_setup + "}" + ql + c_loop + "}"
    	fsa.generateFile( resource.URI.lastSegment + ".cpp", context)
	  }
	  
	  // process whole grammar
	  def process(EObject e){
	  	if(e instanceof Type){
	  		e.compile	
	  	}
	  	if(e instanceof Rules){
	  		e.compile	
	  	}
	  	if(e instanceof Variables){
	  		e.compile	
	  	}
	  }

	  // Includes  
	  // Instance & Vars
	  def compile(Type e) {
	  	c_vars += '''«e.eClass.name» «e.name»(«e.values.join(",")»);''' + ql
	  	if(e instanceof BlueToothImpl){
	  		c_vars += '''String «e.name»Response = "";''' + ql
	  	}
	  }

	  def compile(Variables e) {
	  	c_vars += '''byte «e.name» = «e.values.last»;''' + ql

	  }

	  // Setup
	  
	  // Loop
	  
	  // Methods
	  def compile(Rules e) {
//	  	if(e.eClass.name == BTRule.simpleName){
//			var btClass = e as BTRuleImpl
//
//			bt_block = ind1 + btClass.superType.name + "Response = " + btClass.superType.name + ".read();" + ql
//	  		bt_block = ind1 + '''if( «btClass.superType.name»Response == '«e.fullyQualifiedName»' ){''' + ql
//	  		bt_block += ind2 + splitExp(e.thenPart as ObjectLiteralImpl) + ql
//	  		bt_block += ind1 + "}" + ql
//	  	}
	  	if(e.eClass.name == BTRule.simpleName){
			var btClass = e as BTRuleImpl
	  		if(bt_block == ""){
		  	    bt_block  = ind1 + '''if(«btClass.superType.name».received()){ '''+ ql
    			bt_block += ind2 + '''«btClass.superType.name»Response = '';''' + ql
		  		bt_block += ind2 + '''while( «btClass.superType.name».received()){''' + ql
		  		bt_block += ind3 + '''«btClass.superType.name»Response += (char)«btClass.superType.name».read();''' + ql
		  		bt_block += ind2 + "}" + ql
		  		bt_block += ind1 + "}" + ql
		  		bt_test = true
			}
	  		bt_block += ind1 + '''if( «btClass.superType.name»Response == '«e.fullyQualifiedName»' ){''' + ql
	  		bt_block += ind2 + splitExp(e.thenPart as ObjectLiteralImpl) + ql
	  		bt_block += ind1 + "}" + ql
	  	}
	  	if(e.eClass.name == ButtonRule.simpleName){
	  		    var ruleClass = e as ButtonRuleImpl
	  		    var state = "HIGH"
	  		    if(ruleClass.btnActions.get(0) == "FREE"){
	  		    	state = "LOW";
	  		    }
		  	    c_loop += ind1 + "if(" + ruleClass.superType.name + ".getState() == " + state + "){ "+ ql
		  		c_loop += ind2 + splitExp(e.thenPart as ObjectLiteralImpl) + ql
		  		c_loop += ind1 + "}" + ql
	  		
	  	}
	  } 
	  
//	  def compile(Rules e) ''' 
//	    «IF e.eClass.name == BTRule.simpleName»
//	    	// bt_msg
//	    	«e.fullyQualifiedName»«ql»  
//	    	// cmd
//	    	«splitExp(e.thenPart as XBlockExpression)»«ql»
//	    «ENDIF»	    
//	  '''
	  
	  def String splitExp(ObjectLiteralImpl exp){
	  	var String s = ""
	  	for ( c : exp.expressions) {
	  		if(c instanceof LEDMethods){
	  			s += c.buildExp()
	  		}
	  		if(c instanceof MotorMethods){
	  			s += c.buildExp()
	  		}
	  		
	  	}
	  	return s
	  }
	  
	  def String buildExp(MotorMethods exp){
	  	val x = exp as MotorMethodsImpl
	  	return x.superType.name + "." + x.motorFunctions.get(0) + "();" + ql
	  }
	  	  
	  def String buildExp(LEDMethods exp){
	  	val x = exp as LEDMethodsImpl
	  	return x.superType.name + "." + x.ledFunctions.get(0) + "();" + ql
	  }
	
}