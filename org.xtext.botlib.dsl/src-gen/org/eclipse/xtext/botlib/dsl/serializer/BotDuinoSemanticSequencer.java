/*
 * generated by Xtext
 */
package org.eclipse.xtext.botlib.dsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.botlib.dsl.botDuino.BTRule;
import org.eclipse.xtext.botlib.dsl.botDuino.BlueTooth;
import org.eclipse.xtext.botlib.dsl.botDuino.BotDuinoPackage;
import org.eclipse.xtext.botlib.dsl.botDuino.Button;
import org.eclipse.xtext.botlib.dsl.botDuino.ButtonRule;
import org.eclipse.xtext.botlib.dsl.botDuino.CTRL;
import org.eclipse.xtext.botlib.dsl.botDuino.CTRLRule;
import org.eclipse.xtext.botlib.dsl.botDuino.DomainModel;
import org.eclipse.xtext.botlib.dsl.botDuino.LED;
import org.eclipse.xtext.botlib.dsl.botDuino.LEDMethods;
import org.eclipse.xtext.botlib.dsl.botDuino.Motor;
import org.eclipse.xtext.botlib.dsl.botDuino.MotorMethods;
import org.eclipse.xtext.botlib.dsl.botDuino.ObjectLiteral;
import org.eclipse.xtext.botlib.dsl.botDuino.Registers;
import org.eclipse.xtext.botlib.dsl.botDuino.Sensor;
import org.eclipse.xtext.botlib.dsl.botDuino.SensorRule;
import org.eclipse.xtext.botlib.dsl.botDuino.Servo;
import org.eclipse.xtext.botlib.dsl.services.BotDuinoGrammarAccess;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.JvmGenericArrayTypeReference;
import org.eclipse.xtext.common.types.JvmInnerTypeReference;
import org.eclipse.xtext.common.types.JvmLowerBound;
import org.eclipse.xtext.common.types.JvmParameterizedTypeReference;
import org.eclipse.xtext.common.types.JvmTypeParameter;
import org.eclipse.xtext.common.types.JvmUpperBound;
import org.eclipse.xtext.common.types.JvmWildcardTypeReference;
import org.eclipse.xtext.common.types.TypesPackage;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.eclipse.xtext.xbase.XAssignment;
import org.eclipse.xtext.xbase.XBasicForLoopExpression;
import org.eclipse.xtext.xbase.XBinaryOperation;
import org.eclipse.xtext.xbase.XBlockExpression;
import org.eclipse.xtext.xbase.XBooleanLiteral;
import org.eclipse.xtext.xbase.XCasePart;
import org.eclipse.xtext.xbase.XCastedExpression;
import org.eclipse.xtext.xbase.XCatchClause;
import org.eclipse.xtext.xbase.XClosure;
import org.eclipse.xtext.xbase.XConstructorCall;
import org.eclipse.xtext.xbase.XDoWhileExpression;
import org.eclipse.xtext.xbase.XFeatureCall;
import org.eclipse.xtext.xbase.XForLoopExpression;
import org.eclipse.xtext.xbase.XIfExpression;
import org.eclipse.xtext.xbase.XInstanceOfExpression;
import org.eclipse.xtext.xbase.XListLiteral;
import org.eclipse.xtext.xbase.XMemberFeatureCall;
import org.eclipse.xtext.xbase.XNullLiteral;
import org.eclipse.xtext.xbase.XNumberLiteral;
import org.eclipse.xtext.xbase.XPostfixOperation;
import org.eclipse.xtext.xbase.XReturnExpression;
import org.eclipse.xtext.xbase.XSetLiteral;
import org.eclipse.xtext.xbase.XStringLiteral;
import org.eclipse.xtext.xbase.XSwitchExpression;
import org.eclipse.xtext.xbase.XSynchronizedExpression;
import org.eclipse.xtext.xbase.XThrowExpression;
import org.eclipse.xtext.xbase.XTryCatchFinallyExpression;
import org.eclipse.xtext.xbase.XTypeLiteral;
import org.eclipse.xtext.xbase.XUnaryOperation;
import org.eclipse.xtext.xbase.XVariableDeclaration;
import org.eclipse.xtext.xbase.XWhileExpression;
import org.eclipse.xtext.xbase.XbasePackage;
import org.eclipse.xtext.xbase.serializer.XbaseSemanticSequencer;
import org.eclipse.xtext.xtype.XFunctionTypeRef;
import org.eclipse.xtext.xtype.XImportDeclaration;
import org.eclipse.xtext.xtype.XImportSection;
import org.eclipse.xtext.xtype.XtypePackage;

@SuppressWarnings("all")
public class BotDuinoSemanticSequencer extends XbaseSemanticSequencer {

	@Inject
	private BotDuinoGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == BotDuinoPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case BotDuinoPackage.BT_RULE:
				sequence_BTRule(context, (BTRule) semanticObject); 
				return; 
			case BotDuinoPackage.BLUE_TOOTH:
				sequence_BlueTooth(context, (BlueTooth) semanticObject); 
				return; 
			case BotDuinoPackage.BUTTON:
				sequence_Button(context, (Button) semanticObject); 
				return; 
			case BotDuinoPackage.BUTTON_RULE:
				sequence_ButtonRule(context, (ButtonRule) semanticObject); 
				return; 
			case BotDuinoPackage.CTRL:
				sequence_CTRL(context, (CTRL) semanticObject); 
				return; 
			case BotDuinoPackage.CTRL_RULE:
				sequence_CTRLRule(context, (CTRLRule) semanticObject); 
				return; 
			case BotDuinoPackage.DOMAIN_MODEL:
				sequence_DomainModel(context, (DomainModel) semanticObject); 
				return; 
			case BotDuinoPackage.LED:
				sequence_LED(context, (LED) semanticObject); 
				return; 
			case BotDuinoPackage.LED_METHODS:
				sequence_LEDMethods(context, (LEDMethods) semanticObject); 
				return; 
			case BotDuinoPackage.MOTOR:
				sequence_Motor(context, (Motor) semanticObject); 
				return; 
			case BotDuinoPackage.MOTOR_METHODS:
				sequence_MotorMethods(context, (MotorMethods) semanticObject); 
				return; 
			case BotDuinoPackage.OBJECT_LITERAL:
				sequence_XBlockExpression(context, (ObjectLiteral) semanticObject); 
				return; 
			case BotDuinoPackage.REGISTERS:
				sequence_Registers(context, (Registers) semanticObject); 
				return; 
			case BotDuinoPackage.SENSOR:
				sequence_Sensor(context, (Sensor) semanticObject); 
				return; 
			case BotDuinoPackage.SENSOR_RULE:
				sequence_SensorRule(context, (SensorRule) semanticObject); 
				return; 
			case BotDuinoPackage.SERVO:
				sequence_Servo(context, (Servo) semanticObject); 
				return; 
			}
		else if (epackage == TypesPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TypesPackage.JVM_FORMAL_PARAMETER:
				if (rule == grammarAccess.getFullJvmFormalParameterRule()) {
					sequence_FullJvmFormalParameter(context, (JvmFormalParameter) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmFormalParameterRule()) {
					sequence_JvmFormalParameter(context, (JvmFormalParameter) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_GENERIC_ARRAY_TYPE_REFERENCE:
				sequence_JvmTypeReference(context, (JvmGenericArrayTypeReference) semanticObject); 
				return; 
			case TypesPackage.JVM_INNER_TYPE_REFERENCE:
				sequence_JvmParameterizedTypeReference(context, (JvmInnerTypeReference) semanticObject); 
				return; 
			case TypesPackage.JVM_LOWER_BOUND:
				if (rule == grammarAccess.getJvmLowerBoundAndedRule()) {
					sequence_JvmLowerBoundAnded(context, (JvmLowerBound) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmLowerBoundRule()) {
					sequence_JvmLowerBound(context, (JvmLowerBound) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_PARAMETERIZED_TYPE_REFERENCE:
				if (action == grammarAccess.getJvmParameterizedTypeReferenceAccess().getJvmInnerTypeReferenceOuterAction_1_4_0_0_0()) {
					sequence_JvmParameterizedTypeReference_JvmInnerTypeReference_1_4_0_0_0(context, (JvmParameterizedTypeReference) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmTypeReferenceRule()
						|| action == grammarAccess.getJvmTypeReferenceAccess().getJvmGenericArrayTypeReferenceComponentTypeAction_0_1_0_0()
						|| rule == grammarAccess.getJvmParameterizedTypeReferenceRule()
						|| rule == grammarAccess.getJvmArgumentTypeReferenceRule()) {
					sequence_JvmParameterizedTypeReference(context, (JvmParameterizedTypeReference) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_TYPE_PARAMETER:
				sequence_JvmTypeParameter(context, (JvmTypeParameter) semanticObject); 
				return; 
			case TypesPackage.JVM_UPPER_BOUND:
				if (rule == grammarAccess.getJvmUpperBoundAndedRule()) {
					sequence_JvmUpperBoundAnded(context, (JvmUpperBound) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmUpperBoundRule()) {
					sequence_JvmUpperBound(context, (JvmUpperBound) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_WILDCARD_TYPE_REFERENCE:
				sequence_JvmWildcardTypeReference(context, (JvmWildcardTypeReference) semanticObject); 
				return; 
			}
		else if (epackage == XbasePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XbasePackage.XASSIGNMENT:
				sequence_XAssignment_XMemberFeatureCall(context, (XAssignment) semanticObject); 
				return; 
			case XbasePackage.XBASIC_FOR_LOOP_EXPRESSION:
				sequence_XBasicForLoopExpression(context, (XBasicForLoopExpression) semanticObject); 
				return; 
			case XbasePackage.XBINARY_OPERATION:
				sequence_XAdditiveExpression_XAndExpression_XAssignment_XEqualityExpression_XMultiplicativeExpression_XOrExpression_XOtherOperatorExpression_XRelationalExpression(context, (XBinaryOperation) semanticObject); 
				return; 
			case XbasePackage.XBLOCK_EXPRESSION:
				sequence_XExpressionInClosure(context, (XBlockExpression) semanticObject); 
				return; 
			case XbasePackage.XBOOLEAN_LITERAL:
				sequence_XBooleanLiteral(context, (XBooleanLiteral) semanticObject); 
				return; 
			case XbasePackage.XCASE_PART:
				sequence_XCasePart(context, (XCasePart) semanticObject); 
				return; 
			case XbasePackage.XCASTED_EXPRESSION:
				sequence_XCastedExpression(context, (XCastedExpression) semanticObject); 
				return; 
			case XbasePackage.XCATCH_CLAUSE:
				sequence_XCatchClause(context, (XCatchClause) semanticObject); 
				return; 
			case XbasePackage.XCLOSURE:
				if (rule == grammarAccess.getXExpressionRule()
						|| rule == grammarAccess.getXAssignmentRule()
						|| action == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOrExpressionRule()
						|| action == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAndExpressionRule()
						|| action == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXEqualityExpressionRule()
						|| action == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXRelationalExpressionRule()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOtherOperatorExpressionRule()
						|| action == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAdditiveExpressionRule()
						|| action == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXMultiplicativeExpressionRule()
						|| action == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXUnaryOperationRule()
						|| rule == grammarAccess.getXCastedExpressionRule()
						|| action == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getXPostfixOperationRule()
						|| action == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0()
						|| rule == grammarAccess.getXMemberFeatureCallRule()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0()
						|| rule == grammarAccess.getXPrimaryExpressionRule()
						|| rule == grammarAccess.getXLiteralRule()
						|| rule == grammarAccess.getXClosureRule()
						|| rule == grammarAccess.getXParenthesizedExpressionRule()
						|| rule == grammarAccess.getXExpressionOrVarDeclarationRule()) {
					sequence_XClosure(context, (XClosure) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXShortClosureRule()) {
					sequence_XShortClosure(context, (XClosure) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XCONSTRUCTOR_CALL:
				sequence_XConstructorCall(context, (XConstructorCall) semanticObject); 
				return; 
			case XbasePackage.XDO_WHILE_EXPRESSION:
				sequence_XDoWhileExpression(context, (XDoWhileExpression) semanticObject); 
				return; 
			case XbasePackage.XFEATURE_CALL:
				sequence_XFeatureCall(context, (XFeatureCall) semanticObject); 
				return; 
			case XbasePackage.XFOR_LOOP_EXPRESSION:
				sequence_XForLoopExpression(context, (XForLoopExpression) semanticObject); 
				return; 
			case XbasePackage.XIF_EXPRESSION:
				sequence_XIfExpression(context, (XIfExpression) semanticObject); 
				return; 
			case XbasePackage.XINSTANCE_OF_EXPRESSION:
				sequence_XRelationalExpression(context, (XInstanceOfExpression) semanticObject); 
				return; 
			case XbasePackage.XLIST_LITERAL:
				sequence_XListLiteral(context, (XListLiteral) semanticObject); 
				return; 
			case XbasePackage.XMEMBER_FEATURE_CALL:
				sequence_XMemberFeatureCall(context, (XMemberFeatureCall) semanticObject); 
				return; 
			case XbasePackage.XNULL_LITERAL:
				sequence_XNullLiteral(context, (XNullLiteral) semanticObject); 
				return; 
			case XbasePackage.XNUMBER_LITERAL:
				sequence_XNumberLiteral(context, (XNumberLiteral) semanticObject); 
				return; 
			case XbasePackage.XPOSTFIX_OPERATION:
				sequence_XPostfixOperation(context, (XPostfixOperation) semanticObject); 
				return; 
			case XbasePackage.XRETURN_EXPRESSION:
				sequence_XReturnExpression(context, (XReturnExpression) semanticObject); 
				return; 
			case XbasePackage.XSET_LITERAL:
				sequence_XSetLiteral(context, (XSetLiteral) semanticObject); 
				return; 
			case XbasePackage.XSTRING_LITERAL:
				sequence_XStringLiteral(context, (XStringLiteral) semanticObject); 
				return; 
			case XbasePackage.XSWITCH_EXPRESSION:
				sequence_XSwitchExpression(context, (XSwitchExpression) semanticObject); 
				return; 
			case XbasePackage.XSYNCHRONIZED_EXPRESSION:
				sequence_XSynchronizedExpression(context, (XSynchronizedExpression) semanticObject); 
				return; 
			case XbasePackage.XTHROW_EXPRESSION:
				sequence_XThrowExpression(context, (XThrowExpression) semanticObject); 
				return; 
			case XbasePackage.XTRY_CATCH_FINALLY_EXPRESSION:
				sequence_XTryCatchFinallyExpression(context, (XTryCatchFinallyExpression) semanticObject); 
				return; 
			case XbasePackage.XTYPE_LITERAL:
				sequence_XTypeLiteral(context, (XTypeLiteral) semanticObject); 
				return; 
			case XbasePackage.XUNARY_OPERATION:
				sequence_XUnaryOperation(context, (XUnaryOperation) semanticObject); 
				return; 
			case XbasePackage.XVARIABLE_DECLARATION:
				sequence_XVariableDeclaration(context, (XVariableDeclaration) semanticObject); 
				return; 
			case XbasePackage.XWHILE_EXPRESSION:
				sequence_XWhileExpression(context, (XWhileExpression) semanticObject); 
				return; 
			}
		else if (epackage == XtypePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XtypePackage.XFUNCTION_TYPE_REF:
				sequence_XFunctionTypeRef(context, (XFunctionTypeRef) semanticObject); 
				return; 
			case XtypePackage.XIMPORT_DECLARATION:
				sequence_XImportDeclaration(context, (XImportDeclaration) semanticObject); 
				return; 
			case XtypePackage.XIMPORT_SECTION:
				sequence_XImportSection(context, (XImportSection) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Entity returns BTRule
	 *     Rules returns BTRule
	 *     BTRule returns BTRule
	 *
	 * Constraint:
	 *     (superType=[BlueTooth|ID] name=ID thenPart=XBlockExpression)
	 */
	protected void sequence_BTRule(ISerializationContext context, BTRule semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BotDuinoPackage.Literals.BT_RULE__SUPER_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BotDuinoPackage.Literals.BT_RULE__SUPER_TYPE));
			if (transientValues.isValueTransient(semanticObject, BotDuinoPackage.Literals.BT_RULE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BotDuinoPackage.Literals.BT_RULE__NAME));
			if (transientValues.isValueTransient(semanticObject, BotDuinoPackage.Literals.RULES__THEN_PART) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BotDuinoPackage.Literals.RULES__THEN_PART));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBTRuleAccess().getSuperTypeBlueToothIDTerminalRuleCall_0_0_1(), semanticObject.getSuperType());
		feeder.accept(grammarAccess.getBTRuleAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getBTRuleAccess().getThenPartXBlockExpressionParserRuleCall_4_0(), semanticObject.getThenPart());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Entity returns BlueTooth
	 *     Type returns BlueTooth
	 *     BlueTooth returns BlueTooth
	 *
	 * Constraint:
	 *     (name=ID superType=[BlueTooth|ID]? values+=INT* values+=INT*)
	 */
	protected void sequence_BlueTooth(ISerializationContext context, BlueTooth semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Entity returns ButtonRule
	 *     Rules returns ButtonRule
	 *     ButtonRule returns ButtonRule
	 *
	 * Constraint:
	 *     (superType=[Button|ID] (btnActions+='PUSH' | btnActions+='FREE') thenPart=XBlockExpression)
	 */
	protected void sequence_ButtonRule(ISerializationContext context, ButtonRule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Entity returns Button
	 *     Type returns Button
	 *     Button returns Button
	 *
	 * Constraint:
	 *     (name=ID superType=[Button|ID]? values+=INT*)
	 */
	protected void sequence_Button(ISerializationContext context, Button semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Entity returns CTRLRule
	 *     Rules returns CTRLRule
	 *     CTRLRule returns CTRLRule
	 *
	 * Constraint:
	 *     (superType=[CTRL|ID] (ctrlActions+='UP' | ctrlActions+='DOWN' | ctrlActions+='LEFT' | ctrlActions+='RIGHT') thenPart=XBlockExpression)
	 */
	protected void sequence_CTRLRule(ISerializationContext context, CTRLRule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Entity returns CTRL
	 *     Type returns CTRL
	 *     CTRL returns CTRL
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         superType=[CTRL|ID]? 
	 *         values+=INT* 
	 *         values+=INT* 
	 *         values+=INT* 
	 *         values+=INT* 
	 *         values+=INT*
	 *     )
	 */
	protected void sequence_CTRL(ISerializationContext context, CTRL semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DomainModel returns DomainModel
	 *
	 * Constraint:
	 *     elements+=Entity+
	 */
	protected void sequence_DomainModel(ISerializationContext context, DomainModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Entity returns LEDMethods
	 *     Methods returns LEDMethods
	 *     LEDMethods returns LEDMethods
	 *
	 * Constraint:
	 *     (superType=[LED|ID] (ledFunctions+='on' | ledFunctions+='off'))
	 */
	protected void sequence_LEDMethods(ISerializationContext context, LEDMethods semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Entity returns LED
	 *     Type returns LED
	 *     LED returns LED
	 *
	 * Constraint:
	 *     (name=ID superType=[LED|ID]? values+=INT*)
	 */
	protected void sequence_LED(ISerializationContext context, LED semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Entity returns MotorMethods
	 *     Methods returns MotorMethods
	 *     MotorMethods returns MotorMethods
	 *
	 * Constraint:
	 *     (superType=[Motor|ID] | (superType=[Servo|ID] (motorFunctions+='run' | motorFunctions+='stop' | motorFunctions+='reverse')))
	 */
	protected void sequence_MotorMethods(ISerializationContext context, MotorMethods semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Entity returns Motor
	 *     Type returns Motor
	 *     Motor returns Motor
	 *
	 * Constraint:
	 *     (name=ID superType=[Motor|ID]? values+=INT* values+=INT* values+=INT*)
	 */
	protected void sequence_Motor(ISerializationContext context, Motor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Entity returns Registers
	 *     Registers returns Registers
	 *
	 * Constraint:
	 *     (name=ID values+=INT*)
	 */
	protected void sequence_Registers(ISerializationContext context, Registers semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Entity returns SensorRule
	 *     Rules returns SensorRule
	 *     SensorRule returns SensorRule
	 *
	 * Constraint:
	 *     (superType=[Sensor|ID] (sensorActions+='HIGH' | sensorActions+='LOW') thenPart=XBlockExpression)
	 */
	protected void sequence_SensorRule(ISerializationContext context, SensorRule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Entity returns Sensor
	 *     Type returns Sensor
	 *     Sensor returns Sensor
	 *
	 * Constraint:
	 *     (name=ID superType=[Sensor|ID]? values+=INT* values+=INT*)
	 */
	protected void sequence_Sensor(ISerializationContext context, Sensor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Entity returns Servo
	 *     Type returns Servo
	 *     Servo returns Servo
	 *
	 * Constraint:
	 *     (name=ID superType=[Servo|ID]? values+=INT* values+=INT* values+=INT*)
	 */
	protected void sequence_Servo(ISerializationContext context, Servo semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XBlockExpression returns ObjectLiteral
	 *     XExpression returns ObjectLiteral
	 *     XAssignment returns ObjectLiteral
	 *     XAssignment.XBinaryOperation_1_1_0_0_0 returns ObjectLiteral
	 *     XOrExpression returns ObjectLiteral
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns ObjectLiteral
	 *     XAndExpression returns ObjectLiteral
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns ObjectLiteral
	 *     XEqualityExpression returns ObjectLiteral
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns ObjectLiteral
	 *     XRelationalExpression returns ObjectLiteral
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns ObjectLiteral
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns ObjectLiteral
	 *     XOtherOperatorExpression returns ObjectLiteral
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns ObjectLiteral
	 *     XAdditiveExpression returns ObjectLiteral
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns ObjectLiteral
	 *     XMultiplicativeExpression returns ObjectLiteral
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns ObjectLiteral
	 *     XUnaryOperation returns ObjectLiteral
	 *     XCastedExpression returns ObjectLiteral
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns ObjectLiteral
	 *     XPostfixOperation returns ObjectLiteral
	 *     XPostfixOperation.XPostfixOperation_1_0_0 returns ObjectLiteral
	 *     XMemberFeatureCall returns ObjectLiteral
	 *     XMemberFeatureCall.XAssignment_1_0_0_0_0 returns ObjectLiteral
	 *     XMemberFeatureCall.XMemberFeatureCall_1_1_0_0_0 returns ObjectLiteral
	 *     XPrimaryExpression returns ObjectLiteral
	 *     XParenthesizedExpression returns ObjectLiteral
	 *     XExpressionOrVarDeclaration returns ObjectLiteral
	 *
	 * Constraint:
	 *     expressions+=Methods*
	 */
	protected void sequence_XBlockExpression(ISerializationContext context, ObjectLiteral semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
