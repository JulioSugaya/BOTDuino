/*******************************************************************************
*
* Author: JÃºlio Sugaya 
* 
 *******************************************************************************/
grammar org.eclipse.xtext.botlib.dsl.BotDuino with org.eclipse.xtext.xbase.Xbase

import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase

generate botDuino "http://www.eclipse.org/Xtext/botlib/dsl/BotDuino"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

DomainModel :
 (elements+=Entity)*;

Entity:
 Type | Rules | Methods;

Type:
 Button | SensorIR | SensorSR04 | BlueTooth | CTRL | LED | Motor | Servo | Variables;


Rules:
	SensorIRRule | SensorSR04Rule | ButtonRule | CTRLRule | BTRule | VarRule | Proc | Loop;

Methods:
  LEDMethods | MotorMethods | CallProc | AttrVar | WaitMethod;	

Variables:
 'VAR' name=ID '=' values+=INT*;
 
LED:
 'LED' name=ID ('extends' superType=[LED])? '('
 values+=INT*
 ')';

Button:
 'Button' name=ID ('extends' superType=[Button])? '('
 values+=INT*
 ')';

Motor:
 'Motor' name=ID ('extends' superType=[Motor])? '('
 values+=INT* ',' values+=INT* ',' values+=INT*
 ')';

SensorIR:
 'SensorIR' name=ID ('extends' superType=[SensorIR])? '('
 values+=INT*
 ')';

SensorSR04:
 'SensorSR04' name=ID ('extends' superType=[SensorSR04])? '('
 values+=INT* ',' values+=INT*
 ')';
 
BlueTooth:
 'BlueTooth' name=ID ('extends' superType=[BlueTooth])? '('
 values+=INT* ',' values+=INT*
 ')'; 
 
CTRL:
 'CTRL' name=ID ('extends' superType=[CTRL])? '('
 values+=INT* ',' values+=INT* ',' values+=INT* ',' values+=INT* ',' values+=INT*
 ')';
  
Servo:
 'Servo' name=ID ('extends' superType=[Servo])? '('
 values+=INT* ',' values+=INT* ',' values+=INT*
 ')';

BTRule:
 'When' superType=[BlueTooth] (op+='==' | op+='!=') name=CH
 'Then' thenPart=XBlockExpression;
 
SensorIRRule:
 'When' superType=[SensorIR] (op+='==' | op+='!=') (actions+= 'FOUND' | actions+= 'NOTHING')
 'Then' thenPart=XBlockExpression;
 
SensorSR04Rule:
 'When' superType=[SensorSR04] (op+='==' | op+='!=' | op+='>' | op+='<') (value+=INT 'cm')
 'Then' thenPart=XBlockExpression;
 
CTRLRule:
 'When' superType=[CTRL] (op+='==' | op+='!=') (actions+= 'UP' | actions+= 'DOWN' | actions+= 'LEFT' | actions+= 'RIGHT')
 'Then' thenPart=XBlockExpression;
 
ButtonRule:
 'When' superType=[Button] (op+='==' | op+='!=') ( actions+= 'PUSH' | actions+= 'FREE')
 'Then' thenPart=XBlockExpression; 
 
VarRule:
 'When' superType=[Variables] (op+='==' | op+='!=') values+=INT*
 'Then' thenPart=XBlockExpression;
 
AttrVar:
 superType=[Variables] '=' values+=INT*;

Proc:
  'Procedure'
  name=ID ('extends' superType=[Proc])?
  thenPart=XBlockExpression;
  
Loop:
  'Loop' thenPart=XBlockExpression;

LEDMethods:	
  superType=[LED]'.'( ledFunctions+= 'on' | ledFunctions+= 'off' | ledFunctions+='on(' + value+=INT + ')');

MotorMethods:	
  superType=[Motor] | superType=[Servo]'.'( motorFunctions+= 'run' | motorFunctions+= 'stop' | motorFunctions+= 'reverse' | motorFunctions+= 'reverse(' + value+=INT + ')' | motorFunctions+= 'run(' + value+=INT + ')');
  
WaitMethod:
  'wait(' value+=INT ')';

CallProc:
  'Exec' superType=[Proc];

  
terminal INT returns ecore::EInt : ('0'..'9')+;
 
terminal ML_COMMENT : '/*' -> '*/';

terminal CH : ('a'..'z'|'A'..'Z' | '0'..'9');

XBlockExpression returns xbase::XExpression:{ObjectLiteral}
 '{'
   expressions+=(Methods)*
 '}';


